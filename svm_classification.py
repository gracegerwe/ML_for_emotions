# -*- coding: utf-8 -*-
"""SVM_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDjZmXmL7O3aXBbChQd4YDSPQdVNa-aY
"""

from google.colab import drive
drive.mount('/content/drive')

import pickle
import numpy as np
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# List of subject directories
subject_dirs = [f'/content/drive/MyDrive/Processed_data/sub{i:03d}.pkl' for i in range(6)]

# Initialize lists to store data and labels
all_eeg_data = []
all_video_labels = []

# Load data for each subject
for subject_dir in subject_dirs:
    print(f"Loading data from: {subject_dir}")

    # Load the preprocessed EEG data from the .pkl file
    with open(subject_dir, 'rb') as f:
        preprocessed_data = pickle.load(f)

    eeg_data = preprocessed_data  # Assuming the preprocessed_data itself is the EEG data

    # Assuming the original shape is (VideoNum, ElecNum, TrialDur*SampRate)
    num_videos, num_electrodes, num_samples = eeg_data.shape

    # Reshape the EEG data to have samples as rows and features as columns
    eeg_data = eeg_data.reshape(num_videos, -1)

    # Assign labels based on the given criteria
    # Videos 1-12 are negative (0), Videos 13-16 are neutral (-1), Videos 17-28 are positive (1)
    # Exclude neutral videos (13-16)
    video_labels = np.zeros(num_videos)
    video_labels[:12] = 0  # Negative
    video_labels[12:16] = -1  # Neutral
    video_labels[16:] = 1  # Positive

    # Filter out neutral videos
    non_neutral_indices = np.where((video_labels != -1))[0]
    eeg_data_filtered = eeg_data[non_neutral_indices]
    video_labels_filtered = video_labels[non_neutral_indices]

    # Append the filtered data and labels to the master lists
    all_eeg_data.append(eeg_data_filtered)
    all_video_labels.append(video_labels_filtered)

# Concatenate the data and labels from all subjects
combined_eeg_data = np.concatenate(all_eeg_data, axis=0)
combined_video_labels = np.concatenate(all_video_labels, axis=0)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(combined_eeg_data, combined_video_labels, test_size=0.2, random_state=42)

# Train SVM classifier
print("Training SVM classifier...")
svm_classifier = SVC(kernel='linear')
svm_classifier.fit(X_train, y_train)
print("SVM classifier trained successfully.")

# Classify each data point and explain the classification
num_videos = len(combined_video_labels)
print("Classifying each data point...")
for i in range(num_videos):
    data_point = combined_eeg_data[i]
    label = combined_video_labels[i]

    # Predict the label for the data point
    predicted_label = svm_classifier.predict([data_point])[0]
    print(f"Data point {i+1}: Predicted Label: {predicted_label}, True Label: {label}")

# Calculate the overall accuracy
num_training_samples = len(y_train)
num_testing_samples = len(y_test)
total_samples = num_training_samples + num_testing_samples
overall_accuracy = (accuracy_score(y_train, svm_classifier.predict(X_train)) * num_training_samples + accuracy_score(y_test, svm_classifier.predict(X_test)) * num_testing_samples) / total_samples

print("Overall accuracy:", overall_accuracy)

import random
import numpy as np

def generate_stimulation_protocol(svm_classifier, combined_eeg_data, combined_video_labels):
    # Randomly select a data point and predict the emotion
    random_index = random.randint(0, len(combined_eeg_data) - 1)
    random_data_point = combined_eeg_data[random_index]
    true_label = combined_video_labels[random_index]

    # Predict the label for the random data point
    predicted_label = svm_classifier.predict([random_data_point])[0]

    # Generate stimulation protocol based on the predicted emotion
    if predicted_label == 0:  # Negative emotion
        stimulation_protocol = "Stimulate the left dorsolateral prefrontal cortex."
    elif predicted_label == 1:  # Positive emotion
        stimulation_protocol = "Stimulate the right dorsolateral prefrontal cortex."
    else:
        stimulation_protocol = "Invalid label. No stimulation protocol generated."

    # Print the results
    print(f"Random data point selected: {random_index + 1}")
    print(f"True label: {true_label}")
    print(f"Predicted label: {predicted_label}")
    print(f"Stimulation protocol: {stimulation_protocol}")

# Call the function to generate a stimulation protocol
generate_stimulation_protocol(svm_classifier, combined_eeg_data, combined_video_labels)

import random
import numpy as np

def generate_stimulation_protocol(svm_classifier, combined_eeg_data, combined_video_labels):
    # Randomly select a data point and predict the emotion
    random_index = random.randint(0, len(combined_eeg_data) - 1)
    random_data_point = combined_eeg_data[random_index]
    true_label = combined_video_labels[random_index]

    # Predict the label for the random data point
    predicted_label = svm_classifier.predict([random_data_point])[0]

    # Generate stimulation protocol based on the predicted emotion
    if predicted_label == 0:  # Negative emotion
        stimulation_protocol = 'Stimulate the left dorsolateral prefrontal cortex.'
    elif predicted_label == 1:  # Positive emotion
        stimulation_protocol = 'Stimulate the right dorsolateral prefrontal cortex.'
    else:
        stimulation_protocol = 'Invalid label. No stimulation protocol generated.'

    # Print the results
    print(f"Random data point selected: {random_index + 1}")
    print(f"True label: {true_label}")
    print(f"Predicted label: {predicted_label}")
    #print(f"Stimulation protocol: {stimulation_protocol}")

    return stimulation_protocol

# Call the function to generate a stimulation protocol
stimulation_protocol = generate_stimulation_protocol(svm_classifier, combined_eeg_data, combined_video_labels)
print(stimulation_protocol)

# Run the simulation 100 times and count positive and negative stimulation protocols
num_simulations = 100
positive_count = 0
negative_count = 0

for _ in range(num_simulations):
    protocol = generate_stimulation_protocol(svm_classifier, combined_eeg_data, combined_video_labels)
    if protocol == "Stimulate the right dorsolateral prefrontal cortex.":
        positive_count += 1
    elif protocol == "Stimulate the left dorsolateral prefrontal cortex.":
        negative_count += 1

# Calculate the percentage of positive and negative stimulation protocols
positive_percentage = (positive_count / num_simulations) * 100
negative_percentage = (negative_count / num_simulations) * 100

print(f"\nSimulation results over {num_simulations} runs:")
print(f"Positive stimulation protocols: {positive_count} ({positive_percentage:.2f}%)")
print(f"Negative stimulation protocols: {negative_count} ({negative_percentage:.2f}%)")

import random

# Function to generate stimulation protocol based on SVM classification
def generate_stimulation_protocol(classification, svm_classifier):
    brain_regions_to_stimulate = ""
    current = ""
    if classification == 1:  # Positive classification
        brain_regions_to_stimulate = "left dorsolateral prefrontal cortex (DLPFC)"
        current = "anodal"
    elif classification == 0:  # Negative classification
        brain_regions_to_stimulate = "right dorsolateral prefrontal cortex (DLPFC)"
        current = "cathodal"
    else:
        print("Invalid classification.")
        return None

    stimulation_protocol = {'electrode_placement': brain_regions_to_stimulate, 'current': current, 'intensity': "1mA", 'duration': "20mins"}

    return stimulation_protocol

# Generate a random index to select a random data point from the EEG dataset
random_index = random.randint(0, len(X_test) - 1)

# Predict the emotion (positive/negative) based on the selected data point
test_case_classification = svm_classifier.predict([X_test[random_index]])[0]

# Generate stimulation protocol based on SVM classification for the selected data point
stimulation_protocol = generate_stimulation_protocol(test_case_classification, svm_classifier)

# Print stimulation protocol for the selected data point
print("For the randomly selected test case (index {}):".format(random_index))
print("SVM Classification:", "Positive" if test_case_classification == 1 else "Negative")
if stimulation_protocol:
    print("Stimulation Protocol:", stimulation_protocol)